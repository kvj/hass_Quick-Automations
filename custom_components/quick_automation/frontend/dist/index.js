/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";const t=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,e=Symbol(),i=new Map;class s{constructor(t,i){if(this._$cssResult$=!0,i!==e)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){let e=i.get(this.cssText);return t&&void 0===e&&(i.set(this.cssText,e=new CSSStyleSheet),e.replaceSync(this.cssText)),e}toString(){return this.cssText}}const n=(t,...i)=>{const n=1===t.length?t[0]:i.reduce(((e,i,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[s+1]),t[0]);return new s(n,e)},o=t?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let i="";for(const e of t.cssRules)i+=e.cssText;return(t=>new s("string"==typeof t?t:t+"",e))(i)})(t):t;var r;const a=window.trustedTypes,l=a?a.emptyScript:"",h=window.reactiveElementPolyfillSupport,d={toAttribute(t,e){switch(e){case Boolean:t=t?l:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},c=(t,e)=>e!==t&&(e==e||t==t),u={attribute:!0,type:String,converter:d,reflect:!1,hasChanged:c};class p extends HTMLElement{constructor(){super(),this._$Et=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Ei=null,this.o()}static addInitializer(t){var e;null!==(e=this.l)&&void 0!==e||(this.l=[]),this.l.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Eh(i,e);void 0!==s&&(this._$Eu.set(s,i),t.push(s))})),t}static createProperty(t,e=u){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const n=this[t];this[e]=s,this.requestUpdate(t,n,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||u}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Eu=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(o(t))}else void 0!==t&&e.push(o(t));return e}static _$Eh(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}o(){var t;this._$Ep=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Em(),this.requestUpdate(),null===(t=this.constructor.l)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$Eg)&&void 0!==e?e:this._$Eg=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$Eg)||void 0===e||e.splice(this._$Eg.indexOf(t)>>>0,1)}_$Em(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Et.set(e,this[e]),delete this[e])}))}createRenderRoot(){var e;const i=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return((e,i)=>{t?e.adoptedStyleSheets=i.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):i.forEach((t=>{const i=document.createElement("style"),s=window.litNonce;void 0!==s&&i.setAttribute("nonce",s),i.textContent=t.cssText,e.appendChild(i)}))})(i,this.constructor.elementStyles),i}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$ES(t,e,i=u){var s,n;const o=this.constructor._$Eh(t,i);if(void 0!==o&&!0===i.reflect){const r=(null!==(n=null===(s=i.converter)||void 0===s?void 0:s.toAttribute)&&void 0!==n?n:d.toAttribute)(e,i.type);this._$Ei=t,null==r?this.removeAttribute(o):this.setAttribute(o,r),this._$Ei=null}}_$AK(t,e){var i,s,n;const o=this.constructor,r=o._$Eu.get(t);if(void 0!==r&&this._$Ei!==r){const t=o.getPropertyOptions(r),a=t.converter,l=null!==(n=null!==(s=null===(i=a)||void 0===i?void 0:i.fromAttribute)&&void 0!==s?s:"function"==typeof a?a:null)&&void 0!==n?n:d.fromAttribute;this._$Ei=r,this[r]=l(e,t.type),this._$Ei=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||c)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$Ei!==t&&(void 0===this._$E_&&(this._$E_=new Map),this._$E_.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$Ep=this._$EC())}async _$EC(){this.isUpdatePending=!0;try{await this._$Ep}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Et&&(this._$Et.forEach(((t,e)=>this[e]=t)),this._$Et=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$EU()}catch(t){throw e=!1,this._$EU(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$Eg)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$Ep}shouldUpdate(t){return!0}update(t){void 0!==this._$E_&&(this._$E_.forEach(((t,e)=>this._$ES(e,this[e],t))),this._$E_=void 0),this._$EU()}updated(t){}firstUpdated(t){}}var _;p.finalized=!0,p.elementProperties=new Map,p.elementStyles=[],p.shadowRootOptions={mode:"open"},null==h||h({ReactiveElement:p}),(null!==(r=globalThis.reactiveElementVersions)&&void 0!==r?r:globalThis.reactiveElementVersions=[]).push("1.2.1");const v=globalThis.trustedTypes,$=v?v.createPolicy("lit-html",{createHTML:t=>t}):void 0,g=`lit$${(Math.random()+"").slice(9)}$`,m="?"+g,y=`<${m}>`,f=document,b=(t="")=>f.createComment(t),A=t=>null===t||"object"!=typeof t&&"function"!=typeof t,w=Array.isArray,E=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,S=/-->/g,C=/>/g,k=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,O=/'/g,x=/"/g,P=/^(?:script|style|textarea)$/i,U=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),T=U(1),H=(U(2),Symbol.for("lit-noChange")),M=Symbol.for("lit-nothing"),j=new WeakMap,N=f.createTreeWalker(f,129,null,!1),R=(t,e)=>{const i=t.length-1,s=[];let n,o=2===e?"<svg>":"",r=E;for(let e=0;e<i;e++){const i=t[e];let a,l,h=-1,d=0;for(;d<i.length&&(r.lastIndex=d,l=r.exec(i),null!==l);)d=r.lastIndex,r===E?"!--"===l[1]?r=S:void 0!==l[1]?r=C:void 0!==l[2]?(P.test(l[2])&&(n=RegExp("</"+l[2],"g")),r=k):void 0!==l[3]&&(r=k):r===k?">"===l[0]?(r=null!=n?n:E,h=-1):void 0===l[1]?h=-2:(h=r.lastIndex-l[2].length,a=l[1],r=void 0===l[3]?k:'"'===l[3]?x:O):r===x||r===O?r=k:r===S||r===C?r=E:(r=k,n=void 0);const c=r===k&&t[e+1].startsWith("/>")?" ":"";o+=r===E?i+y:h>=0?(s.push(a),i.slice(0,h)+"$lit$"+i.slice(h)+g+c):i+g+(-2===h?(s.push(void 0),e):c)}const a=o+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==$?$.createHTML(a):a,s]};class L{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let n=0,o=0;const r=t.length-1,a=this.parts,[l,h]=R(t,e);if(this.el=L.createElement(l,i),N.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=N.nextNode())&&a.length<r;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith(g)){const i=h[o++];if(t.push(e),void 0!==i){const t=s.getAttribute(i.toLowerCase()+"$lit$").split(g),e=/([.?@])?(.*)/.exec(i);a.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?q:"?"===e[1]?W:"@"===e[1]?K:I})}else a.push({type:6,index:n})}for(const e of t)s.removeAttribute(e)}if(P.test(s.tagName)){const t=s.textContent.split(g),e=t.length-1;if(e>0){s.textContent=v?v.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],b()),N.nextNode(),a.push({type:2,index:++n});s.append(t[e],b())}}}else if(8===s.nodeType)if(s.data===m)a.push({type:2,index:n});else{let t=-1;for(;-1!==(t=s.data.indexOf(g,t+1));)a.push({type:7,index:n}),t+=g.length-1}n++}}static createElement(t,e){const i=f.createElement("template");return i.innerHTML=t,i}}function z(t,e,i=t,s){var n,o,r,a;if(e===H)return e;let l=void 0!==s?null===(n=i._$Cl)||void 0===n?void 0:n[s]:i._$Cu;const h=A(e)?void 0:e._$litDirective$;return(null==l?void 0:l.constructor)!==h&&(null===(o=null==l?void 0:l._$AO)||void 0===o||o.call(l,!1),void 0===h?l=void 0:(l=new h(t),l._$AT(t,i,s)),void 0!==s?(null!==(r=(a=i)._$Cl)&&void 0!==r?r:a._$Cl=[])[s]=l:i._$Cu=l),void 0!==l&&(e=z(t,l._$AS(t,e.values),l,s)),e}class D{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:i},parts:s}=this._$AD,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:f).importNode(i,!0);N.currentNode=n;let o=N.nextNode(),r=0,a=0,l=s[0];for(;void 0!==l;){if(r===l.index){let e;2===l.type?e=new B(o,o.nextSibling,this,t):1===l.type?e=new l.ctor(o,l.name,l.strings,this,t):6===l.type&&(e=new F(o,this,t)),this.v.push(e),l=s[++a]}r!==(null==l?void 0:l.index)&&(o=N.nextNode(),r++)}return n}m(t){let e=0;for(const i of this.v)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class B{constructor(t,e,i,s){var n;this.type=2,this._$AH=M,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=s,this._$Cg=null===(n=null==s?void 0:s.isConnected)||void 0===n||n}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=z(this,t,e),A(t)?t===M||null==t||""===t?(this._$AH!==M&&this._$AR(),this._$AH=M):t!==this._$AH&&t!==H&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.S(t):(t=>{var e;return w(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])})(t)?this.A(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}S(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==M&&A(this._$AH)?this._$AA.nextSibling.data=t:this.S(f.createTextNode(t)),this._$AH=t}T(t){var e;const{values:i,_$litType$:s}=t,n="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=L.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===n)this._$AH.m(i);else{const t=new D(n,this),e=t.p(this.options);t.m(i),this.S(e),this._$AH=t}}_$AC(t){let e=j.get(t.strings);return void 0===e&&j.set(t.strings,e=new L(t)),e}A(t){w(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,s=0;for(const n of t)s===e.length?e.push(i=new B(this.M(b()),this.M(b()),this,this.options)):i=e[s],i._$AI(n),s++;s<e.length&&(this._$AR(i&&i._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class I{constructor(t,e,i,s,n){this.type=1,this._$AH=M,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=n,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=M}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,s){const n=this.strings;let o=!1;if(void 0===n)t=z(this,t,e,0),o=!A(t)||t!==this._$AH&&t!==H,o&&(this._$AH=t);else{const s=t;let r,a;for(t=n[0],r=0;r<n.length-1;r++)a=z(this,s[i+r],e,r),a===H&&(a=this._$AH[r]),o||(o=!A(a)||a!==this._$AH[r]),a===M?t=M:t!==M&&(t+=(null!=a?a:"")+n[r+1]),this._$AH[r]=a}o&&!s&&this.k(t)}k(t){t===M?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class q extends I{constructor(){super(...arguments),this.type=3}k(t){this.element[this.name]=t===M?void 0:t}}const V=v?v.emptyScript:"";class W extends I{constructor(){super(...arguments),this.type=4}k(t){t&&t!==M?this.element.setAttribute(this.name,V):this.element.removeAttribute(this.name)}}class K extends I{constructor(t,e,i,s,n){super(t,e,i,s,n),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=z(this,t,e,0))&&void 0!==i?i:M)===H)return;const s=this._$AH,n=t===M&&s!==M||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,o=t!==M&&(s===M||n);n&&this.element.removeEventListener(this.name,this,s),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class F{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){z(this,t)}}const J=window.litHtmlPolyfillSupport;var Z,Q;null==J||J(L,B),(null!==(_=globalThis.litHtmlVersions)&&void 0!==_?_:globalThis.litHtmlVersions=[]).push("2.1.2");class G extends p{constructor(){super(...arguments),this.renderOptions={host:this},this._$Dt=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Dt=((t,e,i)=>{var s,n;const o=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:e;let r=o._$litPart$;if(void 0===r){const t=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:null;o._$litPart$=r=new B(e.insertBefore(b(),t),t,void 0,null!=i?i:{})}return r._$AI(t),r})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!1)}render(){return H}}G.finalized=!0,G._$litElement$=!0,null===(Z=globalThis.litElementHydrateSupport)||void 0===Z||Z.call(globalThis,{LitElement:G});const X=globalThis.litElementPolyfillSupport;null==X||X({LitElement:G}),(null!==(Q=globalThis.litElementVersions)&&void 0!==Q?Q:globalThis.litElementVersions=[]).push("3.1.2");const Y=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){window.customElements.define(t,e)}}})(t,e),tt=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function et(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):tt(t,e)}function it(t){return et({...t,state:!0})}var st;null===(st=window.HTMLSlotElement)||void 0===st||st.prototype.assignedElements;var nt=function(t,e,i,s){var n,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,s);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(r=(o<3?n(r):o>3?n(e,i,r):n(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r},ot=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function r(t){try{l(s.next(t))}catch(t){o(t)}}function a(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((s=s.apply(t,e||[])).next())}))};const rt=[{path:"/quick_automation",name:"Quick Automations"}];let at=class extends G{constructor(){super(...arguments),this._items=void 0,this._editor=void 0}_columns(t){const e={entry_id:{hidden:!0},enabled:{title:"",type:"icon",template:(t,e)=>T`
                    <ha-switch
                        .checked=${t}
                        @change=${t=>{this._toggle(e)}}
                    ></ha-switch>            
                    `},icon:{title:"",type:"icon",template:t=>T`<ha-icon slot="item-icon" icon="mdi:link-variant"></ha-icon>`},title:{title:"Name",sortable:!0,filterable:!0,direction:"asc",width:t?void 0:"500px",grows:!!t,template:t=>T`${t}`}};return t||(e.info={title:"Details",sortable:!1,filterable:!1,direction:"asc",grows:!0,template:(t,e)=>{const i=e.links.filter((t=>t.enabled)).map((t=>lt[t.type].title+(t.reverse?" (Reversed)":""))).join(", ");return T`${i}`}}),e.edit={title:"",filterable:!1,grows:!1,template:(t,e)=>T`
                    <mwc-button
                        @click=${()=>{this._edit(e)}}
                    >
                        Edit
                    </mwc-button>
                `},e.remove={title:"",filterable:!1,grows:!1,template:(t,e)=>T`
                    <mwc-button
                        @click=${()=>{this._remove(e)}}
                    >
                        Remove
                    </mwc-button>
                `},e}_remove(t){return ot(this,void 0,void 0,(function*(){yield this.hass.connection.sendMessagePromise({type:"quick_automation/remove_entry",entry_id:t.entry_id}),this._load()}))}_toggle(t){return ot(this,void 0,void 0,(function*(){yield this.hass.connection.sendMessagePromise({type:"quick_automation/toggle_enabled",entry_id:t.entry_id,enabled:!t.enabled}),this._load()}))}_load(){return ot(this,void 0,void 0,(function*(){const t=yield this.hass.connection.sendMessagePromise({type:"quick_automation/list"});console.log("_load:",t),this._items=t}))}_getItems(){return this._items?this._items:(this._load(),[])}_edit(t){console.log("_edit:",t),t&&(this._editor=t)}_add(){this._editor={entry_id:void 0,title:"",enabled:!0,source:{entity_id:void 0,device_id:void 0},destination:{entity_id:void 0,device_id:void 0},links:[]}}_save(t){return ot(this,void 0,void 0,(function*(){const e=t.detail;console.log("On save:",e),yield this.hass.connection.sendMessagePromise(Object.assign({type:"quick_automation/update_entry"},e)),this._load()}))}render(){return T`
        <hass-tabs-subpage-data-table
            .hass=${this.hass}
            .narrow=${this.narrow}
            back-path="/config"
            .route=${this.route}
            .tabs=${rt}
            .columns=${this._columns(this.narrow)}
            .data=${this._getItems()}
            id="entry_id"
            hasFab
        >
            <ha-fab
                slot="fab"
                label="Add new"
                extended
                @click=${()=>this._add()}
            >
            </ha-fab>
        </hass-tabs-subpage-data-table>
        <quick-automation-editor
            .data=${this._editor}
            .hass=${this.hass}
            @save=${this._save}
            @close=${()=>{this._editor=void 0}}
        >
        </quick-automation-editor>
        `}};nt([et()],at.prototype,"hass",void 0),nt([et()],at.prototype,"narrow",void 0),nt([et()],at.prototype,"route",void 0),nt([et()],at.prototype,"panel",void 0),nt([it()],at.prototype,"_items",void 0),nt([it()],at.prototype,"_editor",void 0),at=nt([Y("quick-automation-panel")],at);const lt={on_off:{title:"ON/OFF",reverse:!0},brightness:{title:"Brightness",reverse:!0},left_right:{title:"Color temperature",reverse:!0},toggle:{title:"Toggle",reverse:!1,select_title:"Action"}};let ht=class extends G{constructor(){super(...arguments),this.data=void 0,this._data=void 0,this._sourceSelector={target:{}},this._destinationSelector={target:{}}}willUpdate(t){t.has("data")&&this.data&&(this._data=Object.assign({},this.data))}_cancel(){this._data=void 0,this.dispatchEvent(new CustomEvent("close",{bubbles:!1}))}_save(){this.dispatchEvent(new CustomEvent("save",{detail:Object.assign({},this._data),bubbles:!1})),this._cancel()}_titleChanged(t){this._data=Object.assign(Object.assign({},this._data),{title:t.detail.value})}targetSet(t){return!(!t.entity_id&&!t.device_id)}_updateTarget(t,e){return ot(this,void 0,void 0,(function*(){const i=t=>Array.isArray(t)?t[t.length-1]:t;this._data=Object.assign(Object.assign({},this._data),{[e]:{}}),t&&t.device_id&&(this._data=Object.assign(Object.assign({},this._data),{[e]:{device_id:i(t.device_id)}})),t&&t.entity_id&&(this._data=Object.assign(Object.assign({},this._data),{[e]:{entity_id:i(t.entity_id)}})),this.targetSet(this._data.source)&&this.targetSet(this._data.destination)&&(yield this._loadTriggerActions())}))}_onSourceChanged(t){const e=t.detail.value;this._updateTarget(e,"source")}_onDestinationChanged(t){const e=t.detail.value;this._updateTarget(e,"destination")}_loadTriggerActions(){return ot(this,void 0,void 0,(function*(){const t=yield this.hass.connection.sendMessagePromise({type:"quick_automation/load_trigger_action",source:this._data.source,destination:this._data.destination});console.log("_loadTriggerActions",t),this._data=Object.assign(Object.assign({},this._data),{title:t.title,links:t.links})}))}_renderLink(t,e){const i=t=>{e.reverse=t.detail.value,this._data=Object.assign(Object.assign({},this._data),{links:[...this._data.links]})},s=t=>{e.extra=t.detail.value,this._data=Object.assign(Object.assign({},this._data),{links:[...this._data.links]})},n=t=>{console.log("Selected:",t.detail),e.trigger=t.detail.value,this._data=Object.assign(Object.assign({},this._data),{links:[...this._data.links]})},o=lt[e.type];let r;if(e.triggers.length){const t={select:{options:e.triggers}};r=T`
            <ha-selector
                label="${o.select_title}"
                .hass=${this.hass}
                .selector=${t}
                .value=${e.trigger}
                @value-changed=${n}
            >
            </ha-selector-target>
            `}let a=T``;if(e.enabled){let t=T``;o.reverse&&(t=T`
                    <ha-selector-boolean
                        label="Reversed"
                        .disabled=${!o.reverse}
                        .hass=${this.hass}
                        .value=${e.reverse}
                        @value-changed=${i}
                    >
                    </ha-selector-boolean>
                `),a=T`
                ${t}
                ${r}
                <label>Extra service data:</label>
                <ha-code-editor
                    .hass=${this.hass}
                    .value=${e.extra}
                    mode="yaml"
                    label="Extra service data"
                    @value-changed=${s}
                >
                </ha-code-editor>
            `}return T`
            <p>${o.title}</p>
            <ha-selector-boolean
                label="Enabled"
                .hass=${this.hass}
                .value=${e.enabled}
                @value-changed=${t=>{e.enabled=t.detail.value,this._data=Object.assign(Object.assign({},this._data),{links:[...this._data.links]})}}
            >
            </ha-selector-boolean>
            ${a}
        `}render(){if(!this._data)return T``;const t=this._data.title.trim()&&this._data.links.length&&this.targetSet(this._data.source)&&this.targetSet(this._data.destination),e=T`
            <paper-input
                .value=${this._data.title}
                @value-changed=${this._titleChanged}
                label="Name"
            >
            </paper-input>
        `,i=T`
            <span class="header_title">Entry Editor</span>
        `;return T`
        <ha-dialog 
            scrimClickAction
            escapeKeyAction
            .heading=${i}
            open
        >
            <div>
                <div class="form">
                    <div>
                        ${e}
                    </div>
                    <div>
                        <p>Source:</p>
                        <ha-selector
                            label="Source"
                            .hass=${this.hass}
                            .selector=${this._sourceSelector}
                            .value=${this._data.source}
                            @value-changed=${this._onSourceChanged}
                        >
                        </ha-selector-target>
                    </div>
                    <div>
                        <p>Destination:</p>
                        <ha-selector
                            label="Source"
                            .hass=${this.hass}
                            .selector=${this._destinationSelector}
                            .value=${this._data.destination}
                            @value-changed=${this._onDestinationChanged}
                        >
                        </ha-selector-target>
                    </div>
                    ${this._data.links.map(((t,e)=>this._renderLink(e,t)))}
                </div>
            </div>
            <mwc-button
                @click=${this._save}
                slot="primaryAction"
                .disabled=${!t}
            >
                Save
            </mwc-button>
            <mwc-button
                @click=${this._cancel}
                slot="secondaryAction"
            >
                Cancel
            </mwc-button>
        </ha-dialog>
        `}static get styles(){return n`
            ha-dialog {
                --mdc-dialog-heading-ink-color: var(--primary-text-color);
                --mdc-dialog-content-ink-color: var(--primary-text-color);
                --justify-action-buttons: space-between;
            }                    
            p {
                font-size: 1.3rem;
                margin: 1em 0;
            }
            label {
                margin: 0.5em 0;
            }
        `}};nt([et()],ht.prototype,"data",void 0),nt([et()],ht.prototype,"hass",void 0),nt([it()],ht.prototype,"_data",void 0),nt([et()],ht.prototype,"_sourceSelector",void 0),nt([et()],ht.prototype,"_destinationSelector",void 0),ht=nt([Y("quick-automation-editor")],ht)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,